input {
  http_poller {
    urls => {
      #btc => "https://min-api.cryptocompare.com/data/price?fsym=BTC&tsyms=USD"
      btc => "https://bittrex.com/api/v1.1/public/getticker?market=USDT-BTC"
    }
    add_field => {
      "crypt" => "BTC"
    }
    target => "crypto"
    request_timeout => 60
    interval => 60
    codec => "json"
    type => http
  }
  http_poller {
    urls => {
      #btc => "https://min-api.cryptocompare.com/data/price?fsym=BTC&tsyms=BCH"
      bch => "https://bittrex.com/api/v1.1/public/getticker?market=USDT-BCC"
    }
    add_field => {
      "crypt" => "BCH"
    }
    target => "crypto"
    request_timeout => 60
    interval => 60
    codec => "json"
    type => http
  }
  http_poller {
    urls => {
      #xmr => "https://min-api.cryptocompare.com/data/price?fsym=XMR&tsyms=USD"
      xmr => "https://bittrex.com/api/v1.1/public/getticker?market=USDT-XMR"
    }
    add_field => {
      "crypt" => "XMR"
    }
    target => "crypto"
    request_timeout => 60
    interval => 60
    codec => "json"
    type => http
  }
  http_poller {
    urls => {
      #eth => "https://min-api.cryptocompare.com/data/price?fsym=ETH&tsyms=USD"
      eth => "https://bittrex.com/api/v1.1/public/getticker?market=USDT-ETH"
    }
    add_field => {
      "crypt" => "ETH"
    }
    target => "crypto"
    request_timeout => 60
    interval => 60
    codec => "json"
    type => http
  }
  #http_poller {
  #  urls => {
  #    mcn => "https://min-api.cryptocompare.com/data/price?fsym=MCN&tsyms=USD"
  #  }
  #  add_field => {
  #    "crypt" => "MCN"
  #  }
  #  target => "crypto"
  #  request_timeout => 60
  #  interval => 60
  #  codec => "json"
  #  type => http
  #}
  gelf{}
}

filter {
  if [type] != "http" {
    if [message] =~ /.*accepted.*/ {

      grok {
        match => {"message" => ".*accepted:\s(?<hashes>\d*).*\)\,\s(?<hashrate>\d*)\..*diff\s*(?<difficult>\d*).*"}
      }

      mutate {
        add_field => ["miner_name", "%{container_name}"]
      }
      mutate {
        add_field => {
            "[@metadata][measurement]" => "miner"
        }
      }
    }
  } else {
    mutate {
      gsub => [
        "message", "\"([0-9]+)\.([0-9]+)\"", "\1.\2"
      ]
    }
    json {
      source => "message"
    }
  }
  if [crypto] {
    mutate {
      rename => {
        "[crypto][crypt]" => "[crypt]"
        "[crypto][result][Bid]" => "[bid]"
        "[crypto][result][Ask]" => "[ask]"
      }
      remove_field => "[crypto]"
      add_field => {
        "[@metadata][measurement]" => "price"
      }
    }
  }
  mutate {
    remove_field => ["command", "container_id", "created", "host", "image_id", "image_name", "level", "source_host", "tag", "version"]
  }
}


output {
  if [crypt] {
    influxdb {
      idle_flush_time => 10
      host => "influxdb"
      user => "{{ influxdb_user }}"
      password => "{{ influxdb_password }}"
      db => "{{ influxdb_crypto_db }}"
      measurement => "%{[@metadata][measurement]}"
      use_event_fields_for_data_points => true
      send_as_tags => ["crypt"]
    }
  } else {
    influxdb {
      idle_flush_time => 10
      host => "influxdb"
      user => "{{ influxdb_user }}"
      password => "{{ influxdb_password }}"
      db => "metrics"
      measurement => "%{[@metadata][measurement]}"
      use_event_fields_for_data_points => true
      retention_policy => "two_weeks"
      send_as_tags => ["target", "miner_name"]
    }
  }
}
